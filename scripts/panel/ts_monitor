#!/usr/bin/env ruby

require 'teamspeak-ruby'
require 'yaml'
require 'fifo'
require 'json'
require 'byebug'

CONFIG="#{Dir.home}/.config/ts_monitor.yaml"
CONKY_FILE="#{Dir.home}/.tmp/ts_online.txt"

@ts = nil
@config = {}
@clients = []
@servers = []
@old_clients = []
@first_load = true

def connect
  if @ts == nil
    @ts = Teamspeak::Client.new(@config[:host][:server])
    @ts.login(@config[:host][:user], @config[:host][:password])
    @ts.command('use', {sid: @config[:host][:server_id]})
  end
end

def disconnect
  puts 'Disconnecting...'
  @ts.disconnect
end

def get_config
  @config = YAML.load_file(CONFIG)
end

def get_client_list
  @old_clients = @clients
  @channels = {}
  @ts.command('channellist').each { |c| @channels[c['cid']] = { name: c['channel_name'], pid: c['pid'] } }
  @clients = @ts.command('clientlist')
  @clients.delete_if {|client| client['client_type'] != 0} if @clients
end

def pause
  sleep @config[:app][:sleep_duration]
end

def loop_logic
  begin
    connect
    get_fifo
    get_client_list
    write_out display_status
    generate_notifications
    pause
  end while true
end

def get_fifo
  @pipe = Fifo.new('/tmp/panel-fifo', :w, :nowait)
end

def display_status
  @config[:display][:status].gsub('#', @clients.length.to_s)
end

def generate_notifications
  if @first_load
    tie_users_to_channels
    write_conky
    @first_load = false
  else
    if users_changed
      tie_users_to_channels
      write_conky
      send_online_notifications
      send_offline_notifications
    end
  end
end

def tie_users_to_channels
  @clients.sort_by! { |key| key['client_nickname'] }
  @channels.each { |k, v| v[:users] = @clients.select {|i| i['cid'] == k} }
end

def build_channel_list
  result = ''
  last_cid = []
  depth = 0
  @channels.each do |k, c|
    if c[:pid] == 0
      last_cid.clear
      depth = 0
    elsif last_cid[-1] == c[:pid]
      # Do nothing
    elsif last_cid.index(c[:pid]) != nil
      while !last_cid.empty? && last_cid.index(c[:pid]) != nil
        depth -= 1
        last_cid.pop
      end
    else
      last_cid << c[:pid]
      depth += 1
    end
    if c[:users] && !c[:users].empty?
      result += "#{' ' * 2 * depth} = #{c[:name]}\n"
      result += c[:users].map{ |user| "#{' ' * 2 * depth}  - #{user['client_nickname']}\n" }.sort.join
    end
  end
  result
end

def send_online_notifications
  (@clients - @old_clients).each { |client|
    cmd = @config[:display][:notify_cmd].gsub('#',
              @config[:display][:notify_online].gsub('#', client['client_nickname']))
    system(cmd)
  }
end

def send_offline_notifications
  (@old_clients - @clients).each { |client|
    cmd = @config[:display][:notify_cmd].gsub('#',
              @config[:display][:notify_offline].gsub('#', client['client_nickname']))
    system(cmd)
  }
end

def users_changed
  @old_clients.length != @clients.length || (@old_clients & @clients).length != @clients.length
end

def write_out val
  @pipe.puts val
end

def write_conky
  contents = ""
  if @clients.length > 0
    contents = "#{@clients.length} users online:\n\n#{build_channel_list}"
  else
    contents = 'No users online'
  end
  File.open(CONKY_FILE, 'w') { |f| f.write contents }
end

get_config

begin
  loop_logic
rescue SystemExit, Interrupt
  #Nothing
rescue Exception => e
  puts e.message
  puts e.backtrace.inspect
ensure
  disconnect
end

